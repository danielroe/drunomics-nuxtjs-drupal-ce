<?php

/**
 * @file
 * Custom elements hooks.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function custom_elements_theme() {
  return [
    'custom_element' => [
      'variables' => ['custom_element' => NULL],
    ],
  ];
}

/**
 * Prepares variables when an entity is rendered as custom element.
 *
 * Default template: custom-element.twig.html.
 */
function template_preprocess_custom_element(&$variables) {
  // Attach custom-elements libraries.
  $variables['#attached']['library'][] = 'custom_elements/main';

  // Generate variables for easier usage in the template.
  /** @var \Drupal\custom_elements\CustomElement $custom_element */
  $custom_element = $variables['custom_element'];
  $variables['attributes'] = new Attribute($custom_element->getAttributes());
  $variables['slots'] = $custom_element->getSlots();
  $variables['tag_prefix'] = $custom_element->getTagPrefix() ? $custom_element->getTagPrefix() . '-' : '';
  $variables['tag'] = $custom_element->getTag();

  BubbleableMetadata::createFromObject($custom_element)
    ->applyTo($variables);
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function custom_elements_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  // Only handle content entities.
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }
  if (strpos($view_mode, 'custom_elements') === 0) {
    $build['#theme'] = 'custom_element';
    $build['#entity_type_id'] = $entity->getEntityTypeId();
    // This is already there by default, but write again to enforce it.
    $build['#' . $entity->getEntityTypeId()] = $entity;
    $build['#view_mode'] = $view_mode;
    $build['#pre_render'][] = 'custom_elements_prerender_entity';
  }
}

/**
 * Pre-render callback for rendering an entity into a custom element.
 */
function custom_elements_prerender_entity($render_content) {
  $entity = $render_content['#' . $render_content['#entity_type_id']];
  /** @var \Drupal\custom_elements\CustomElementGenerator $generator */
  $generator = \Drupal::service('custom_elements.generator');
  $render_content['#custom_element'] = $generator->generate($entity, $render_content['#view_mode']);
  return $render_content;
}
