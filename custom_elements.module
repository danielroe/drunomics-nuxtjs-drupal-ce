<?php

/**
 * @file
 * Custom elements hooks.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Template\Attribute;
use Drupal\custom_elements\CustomElementsEntityViewDisplay;
use Drupal\custom_elements\CustomElementsLayoutBuilderEntityViewDisplay;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplayStorage;
use Drupal\layout_builder\Form\LayoutBuilderEntityViewDisplayForm;

/**
 * Implements hook_theme().
 */
function custom_elements_theme() {
  return [
    'custom_element' => [
      'variables' => ['custom_element' => NULL],
    ],
  ];
}

/**
 * Prepares variables when an entity is rendered as custom element.
 *
 * Default template: custom-element.twig.html.
 */
function template_preprocess_custom_element(&$variables) {
  // Attach custom-elements libraries.
  $variables['#attached']['library'][] = 'custom_elements/main';

  // Generate variables for easier usage in the template.
  /** @var \Drupal\custom_elements\CustomElement $custom_element */
  $custom_element = $variables['custom_element'];
  $variables['attributes'] = new Attribute($custom_element->getAttributes());
  $variables['slots'] = $custom_element->getSlots();
  $variables['tag_prefix'] = $custom_element->getTagPrefix() ? $custom_element->getTagPrefix() . '-' : '';
  $variables['tag'] = $custom_element->getTag();

  BubbleableMetadata::createFromObject($custom_element)
    ->applyTo($variables);
}

/**
 * Implements hook_entity_type_alter().
 *
 * @see custom_elements_module_implements_alter()
 */
function custom_elements_entity_type_alter(array &$entity_types) {
  // Use the right class depending on layout builder being used.
  $class = class_exists(LayoutBuilderEntityViewDisplay::class) ? CustomElementsLayoutBuilderEntityViewDisplay::class : CustomElementsEntityViewDisplay::class;
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['entity_view_display']
    ->setClass($class);
}

/**
 * Implements hook_module_implements_alter().
 */
function custom_elements_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_type_alter') {
    // Make sure this runs after layout builder.
    // Move custom_elements_entity_type_alter() to the end of the list.
    // \Drupal::moduleHandler()->getImplementations()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['custom_elements'];
    unset($implementations['custom_elements']);
    $implementations['custom_elements'] = $group;
  }
  // Be sure our entity_view_alter hook comes last, even after layout builder
  // which also tries to make it come last.
  // @see custom_elements_install().
  if ($hook === 'entity_view_alter') {
    $group = $implementations['custom_elements'];
    unset($implementations['custom_elements']);
    $implementations['custom_elements'] = $group;
  }
}

/**
 * Implements hook_entity_view_display_alter().
 */
function custom_elements_entity_view_display_alter(EntityViewDisplayInterface $display, array $context) {
  // Enable for all view-modes named appropriately by default.
  if (strpos($context['view_mode'], 'custom_elements') === 0) {
    $display->setThirdPartySetting('custom_elements', 'enabled', 1);
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function custom_elements_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  // Alter the build array to apply custom elements rendering.
  if (!empty($build['#custom_elements_enabled'])) {
    $build['#theme'] = 'custom_element';

    // Add layout builder sections, but be sure to do so once extra fields
    // were added by layout_builder_entity_view_alter()
    // @see custom_elements_module_implements_alter().
    // @see \Drupal\custom_elements\CustomElementsEntityViewDisplayTrait::buildMultipleViaCustomElements()
    if (!empty($build['#custom_elements_add_layout_builder_section'])) {
      $build['#custom_element']->setSlot('sections', $build['_layout_builder']);
    }
  }
}
